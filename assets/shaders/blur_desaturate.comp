#version 450

layout( local_size_x = 8, local_size_y = 8 ) in;

layout( binding = 0 ) uniform ubo { uint direction; };
layout( r11f_g11f_b10f, binding = 1 ) uniform image2D srcImg;
layout( r11f_g11f_b10f, binding = 2 ) uniform image2D dstImg;

const vec3 LUMA = vec3( 0.299, 0.587, 0.114 );
const uint RADIUS = 11;

const ivec2 OFFSET[ 2 ][ RADIUS ] = { {
    ivec2( -5, 0 ),
    ivec2( -4, 0 ),
    ivec2( -3, 0 ),
    ivec2( -2, 0 ),
    ivec2( -1, 0 ),
    ivec2(  0, 0 ),
    ivec2(  1, 0 ),
    ivec2(  2, 0 ),
    ivec2(  3, 0 ),
    ivec2(  4, 0 ),
    ivec2(  5, 0 ),
}, {
    ivec2( 0, -5 ),
    ivec2( 0, -4 ),
    ivec2( 0, -3 ),
    ivec2( 0, -2 ),
    ivec2( 0, -1 ),
    ivec2( 0,  0 ),
    ivec2( 0,  1 ),
    ivec2( 0,  2 ),
    ivec2( 0,  3 ),
    ivec2( 0,  4 ),
    ivec2( 0,  5 ),
} };

// excel =(0.5-COS((A1/12)*PI()*2)*0.5)/(11/2)
const float OFFSET_MUL[ RADIUS ] = {
    0.0121795087468692,
    0.0454545454545454,
    0.0909090909090909,
    0.136363636363636,
    0.169638673071313,
    0.181818181818182,
    0.169638673071313,
    0.136363636363636,
    0.0909090909090909,
    0.0454545454545454,
    0.0121795087468692,
};

vec4 read( ivec2 dir )
{
    return imageLoad( srcImg, ivec2( gl_GlobalInvocationID.xy ) + dir );
}

void main()
{
    vec4 blur = vec4( 0.0, 0.0, 0.0, 0.0 );
    for ( uint i = 0; i < RADIUS; ++i ) {
        blur += read( OFFSET[ direction ][ i ] ) * OFFSET_MUL[ i ];
    }

    float l = clamp( dot( blur.rgb, LUMA ), 0.0, 1.0 );
    vec3 color = mix( blur.rgb, vec3( l, l, l ), 0.5 );
    imageStore( dstImg, ivec2( gl_GlobalInvocationID.xy ), vec4( color, 1.0 ) );
}
