function( compileShader )
    cmake_parse_arguments( COOK_SHADER "" "FILE;PACK" "" ${ARGN} )
    if ( NOT COOK_SHADER_FILE )
        message( FATAL_ERROR "FILE argument not specified" )
    endif()
    if ( NOT COOK_SHADER_PACK )
        set( COOK_SHADER_PACK ${DEFAULT_PACK} )
    endif()

    #set( OPTIMIZE_LEVEL "-O0" "-g" ) # debug
    set( OPTIMIZE_LEVEL "-O" ) # optimized

    set( file_out "${CMAKE_CURRENT_BINARY_DIR}/${COOK_SHADER_FILE}.spv" )
    add_custom_target( "shader.${COOK_SHADER_FILE}" DEPENDS "${file_out}" )
    add_custom_command(
        OUTPUT "${file_out}"
        DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${COOK_SHADER_FILE}"
        COMMAND Vulkan::glslc ${OPTIMIZE_LEVEL} "${CMAKE_CURRENT_SOURCE_DIR}/${COOK_SHADER_FILE}" -o "${file_out}"
    )
    set_vs_directory( "shader.${COOK_SHADER_FILE}" "assets/shaders" )
    pak_file_cooked( ${COOK_SHADER_PACK} "${file_out}" "shader.${COOK_SHADER_FILE}" )
endfunction()

compileShader( FILE afterglow.frag )
compileShader( FILE afterglow.vert )
compileShader( FILE albedo.frag )
compileShader( FILE albedo.vert )
compileShader( FILE antialias_fxaa.comp )
compileShader( FILE background.frag )
compileShader( FILE background.vert )
compileShader( FILE beam_blob.frag )
compileShader( FILE beam_blob.vert )
compileShader( FILE blur_desaturate.comp )
compileShader( FILE gamma.comp )
compileShader( FILE glow.frag )
compileShader( FILE glow.vert )
compileShader( FILE mesh.frag )
compileShader( FILE mesh.vert )
compileShader( FILE particles_blob.frag )
compileShader( FILE particles_blob.vert )
compileShader( FILE space_dust.vert )
compileShader( FILE space_dust.frag )
compileShader( FILE sprite_sequence.frag PACK init )
compileShader( FILE sprite_sequence.vert PACK init )
compileShader( FILE sprite_sequence_colors.frag )
compileShader( FILE sprite_sequence_colors.vert )
compileShader( FILE thruster2.frag )
compileShader( FILE thruster2.vert )
compileShader( FILE trianglefan_texture.frag )
compileShader( FILE trianglefan_texture.vert )
compileShader( FILE projectile.vert )
compileShader( FILE projectile.frag )
